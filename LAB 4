## Experiment 1: Develop an Application with Example Code

1. Create a new application Project and keep your BSP as existing BSP.
2. After that select empty application and click on finish.
3. Create a source file with the name of .c.
4. The changes of the build will be seen in the console window.
5. There will be a directory with a file of hello world.c open it with gedit.
6. Select the contents of the entire file and paste it in hell_zynq.c file.
7. Now the issue of BSP can also be resolved, generally it fixes itself but in some cases it doesn’t. 
8. In case it doesn’t Select standalone_bsp_0 in Project Explorer. Now select Project -> Clean. 
9. Select the radio button for Clean projects selected below. Check the box for standalone_bsp_0. Click OK. 
10. After cleaning, an automatic rebuild will start which will eliminate the red X from the BSP. 
11. There is a linker script clicking on it, it opens a summary tab. 
12. The tab shows the available memory regions, stack and heap sizes, mapping between application sections and memory regions, the summary section is completely editable.
13. We can also create a new linker script for a project.

## Experiment 2: Add Peripheral Test

1. Make a new peripheral test application project with existing BSP. 
2. The file has an option to enable I- and D- caches. 
3. Then right click on the function line 63 and 64 and click on open declaration. 
4. The function declaration is displayed in source code file xil_cache.c, which is part of the BSP. 
5. You’ll notice that both CacheEnable() functions include the commands to enable both the L1 and L2 caches.
